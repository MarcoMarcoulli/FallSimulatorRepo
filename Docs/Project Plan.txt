1. Introduzione
Nome del progetto: FallSimulator

Obiettivo del progetto:
Il progetto FallSimulator ha l’obiettivo di studiare la caduta libera lungo una traiettoria definita. L’aspetto chiave è che, una volta determinata la traiettoria, sarà possibile calcolare anche il tempo "t" necessario per percorrere la curva.

Motivazione e contesto:
Il problema che ha portato allo sviluppo di FallSimulator è quello della brachistocrona, una questione classica di ottimizzazione che chiede di trovare la traiettoria ideale per collegare due punti, minimizzando il tempo di percorrenza. Questo problema è stato risolto matematicamente e dimostrato attraverso l’applicazione, rendendo possibile uno studio più approfondito delle traiettorie.

Stakeholder:
Il team di sviluppo è composto da due sviluppatori, Marco Locatelli e Nava Nicolò, che lavorano in stretta collaborazione e si dividono equamente i compiti del progetto.

Sintesi del progetto:
Il software permette di selezionare due punti nello spazio (con la possibilità di includere punti intermedi) e generare una curva che passa per questi punti. Successivamente, anima una sfera lungo questa curva per studiare il suo comportamento. FallSimulator propone inoltre curve preimpostate, come parabole, rette e cicloidi, per analisi rapide.

2. Modello di Processo
Il progetto FallSimulator segue un approccio Agile SCRUM, scelto per la sua flessibilità, dato che alcune funzionalità non sono ancora completamente definite.

Le attività principali sono:

Analisi dei requisiti
Progettazione
Prototipazione rapida
Sviluppo
Documentazione
Test
Rilascio
Le milestone principali del progetto sono:

Prototipo funzionante
Test e animazione
Rilascio finale
Per misurare i progressi, il team utilizza il metodo dei Daily Stand-up Meeting, con un backlog che aiuta a tenere traccia delle attività da completare e a gestire le priorità.

3. Organizzazione del progetto
Il team di sviluppo del progetto FallSimulator è composto da due sviluppatori, Marco Locatelli e Nava Nicolò, che collaborano su tutti gli aspetti del progetto. Nicolò ha un interesse principale per la documentazione e il project plan, mentre Marco è più focalizzato sullo sviluppo del codice. Entrambi partecipano comunque a diverse attività del progetto.

Revisore:
Il progetto verrà valutato dal professore Gargantini, docente di ingegneria del software.

Strumenti e comunicazione:
Il team utilizza GitHub per il controllo di versione e la gestione del codice. La maggior parte degli incontri e dei confronti avviene di persona, facilitando una comunicazione diretta e collaborativa.

4. Standard, linee guida e procedure
Convenzioni di codifica:
Il team segue le convenzioni ufficiali di Oracle per Java, incluse regole come:

Classi in PascalCase.
Variabili e metodi in camelCase.
Costanti in MAIUSCOLO_CON_SOTTOLINEATURE.
Strumenti di sviluppo:
Il progetto utilizza Maven per la gestione delle dipendenze e il controllo del ciclo di build. Il repository è gestito su GitHub per il controllo di versione.

Gestione della documentazione:
Anche se la documentazione non è un focus primario, il team utilizza Javadoc per mantenere una documentazione minima del codice. Nicolò si occupa principalmente della documentazione di progetto.

Code review:
Le modifiche al codice vengono sottoposte a revisione tramite GitHub, per garantire la qualità del codice e prevenire errori.

Controllo di versione:
Il team utilizza GitHub per gestire le versioni del progetto e tenere traccia delle modifiche.

5. Attività di gestione
Monitoraggio del progresso:
Il team utilizza Daily Stand-up Meeting per confrontarsi quotidianamente sui progressi e identificare eventuali ostacoli. Inoltre, dopo ogni Sprint, viene svolta una Sprint Review per esaminare il lavoro completato e pianificare le attività successive.

Stabilire le priorità:
Le funzionalità principali, come l'animazione e il calcolo del tempo, hanno la priorità. Una volta completate, il team procede con l'aggiunta di altre funzionalità, come le curve preimpostate e le ottimizzazioni.

Gestione dei problemi:
I problemi vengono risolti attraverso una comunicazione diretta all'interno del team. Se il problema non può essere risolto internamente, viene richiesto aiuto al professore Gargantini.